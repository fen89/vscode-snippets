{
  "Vue Service": {
    "prefix": ["tsvue-service", "vue-service"],
    "description": "Vue Service",
    "scope": "typescript",
    "body": [
      "import { BaseService } from './base.service';",
      "",
      "export interface I${1:Name}List {",
      "  id: number;",
      "}",
      "",
      "export interface I${1:Name} {",
      "  id: number;",
      "}",
      "",
      "export interface I${1:Name}Create {",
      "  id: number;",
      "}",
      "",
      "export interface I${1:Name}Update {",
      "  id: number;",
      "}",
      "",
      "export class ${1:Name}Service extends BaseService {",
      "  private readonly endpoint = `/api/${2:name}`;",
      "",
      "  list() {",
      "    return this.get<I${1:Name}List[]>(`${this.endpoint}`);",
      "  }",
      "",
      "  findById(id: number) {",
      "    return this.get<I${1:Name}>(`${this.endpoint}/\\${id}`);",
      "  }",
      "",
      "  create(${2:name}: I${1:Name}Create) {",
      "    return this.post(`${this.endpoint}`);",
      "  }",
      "",
      "  update(${2:name}: I${1:Name}Update) {",
      "    return this.put(`${this.endpoint}`, ${2:name});",
      "  }",
      "",
      "  remove(id: number) {",
      "    return this.delete(`${this.endpoint}/\\${id}`);",
      "  }",
      "}",
      "",
      "export const ${2:name}Service = new ${1:User}Service();",
      ""
    ]
  },
  "Vue Router": {
    "prefix": ["tsvue-router", "vue-router"],
    "description": "Vue Router",
    "scope": "typescript",
    "body": [
      "import Vue from 'vue';",
      "import VueRouter from 'vue-router';",
      "import Home from '../views/Home.vue';",
      "",
      "Vue.use(VueRouter);",
      "",
      "const routes = [",
      "  {",
      "    path: '/',",
      "    name: 'home',",
      "    component: Home,",
      "  },",
      "  {",
      "    path: '/about',",
      "    name: 'about',",
      "    // route level code-splitting",
      "    // this generates a separate chunk (about.[hash].js) for this route",
      "    // which is lazy-loaded when the route is visited.",
      "    component: () => import(/* webpackChunkName: \"about\" */ '../views/About.vue'),",
      "  },",
      "];",
      "",
      "const router = new VueRouter({",
      "  mode: 'history',",
      "  base: process.env.BASE_URL,",
      "  routes,",
      "});",
      "",
      "export default router;",
      ""
    ]
  },
  "Vue Class Component": {
    "prefix": ["tsvue-component", "vue-component"],
    "description": "Vue Class Component",
    "body": [
      "<template>",
      "  <p>${1:User}Component is working!</p>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import Vue from 'vue';",
      "import Component from 'vue-class-component';",
      "import { Prop } from 'vue-property-decorator';",
      "",
      "@Component",
      "export default class ${1:User}Component extends Vue {",
      "  @Prop({ default: false }) readonly loading!: boolean;",
      "}",
      "</script>"
    ]
  },

  "Vue Class Component Property": {
    "prefix": ["tsvue-prop", "vue-prop"],
    "scope": "vue,typescript",
    "description": "Vue Class Component Property",
    "body": "@Prop() readonly ${1:name}!: ${2:type};$0"
  },
  "Vue Class Component Property with default value": {
    "prefix": ["tsvue-prop-default", "vue-prop-default"],
    "scope": "vue,typescript",
    "description": "Vue Class Component Property /w default value",
    "body": "@Prop({ default: ${3:false} }) readonly ${1:name}!: ${2:boolean};$0"
  },

  "Vuex Store": {
    "prefix": ["tsvue-store", "vuex-store"],
    "scope": "typescript",
    "description": "Vuex store",
    "body": [
      "import Vue from 'vue';",
      "import Vuex from 'vuex';",
      "",
      "Vue.use(Vuex);",
      "",
      "const store = new Vuex.Store({",
      "  strict: true,",
      "  state: {",
      "    version: '1.0.0',",
      "  },",
      "  modules: {",
      "    /* they are injected dynamically, see /modules folder */",
      "  },",
      "});",
      "",
      "export default store;",
      ""
    ]
  },
  "Vuex Store Module": {
    "prefix": ["tsvue-store-module", "vuex-store-module"],
    "scope": "typescript",
    "description": "Vuex store module",
    "body": [
      "import { Action, Module, Mutation, VuexModule } from 'vuex-module-decorators';",
      "import store from '..';",
      "",
      "@Module({",
      "  dynamic: true,",
      "  store,",
      "  namespaced: true,",
      "  name: '${1:name}'",
      "})",
      "export default class ${2:Name}StateModule extends VuexModule {",
      "  collection: I${2:Name}[] = [];",
      "",
      "  @Mutation",
      "  setCollection(orders: I${2:Name}[]) {",
      "    this.collection = orders;",
      "  }",
      "",
      "  @Mutation",
      "  resetState() {",
      "    this.collection = [];",
      "  }",
      "",
      "  @Action",
      "  async fetch() {",
      "    // const result = await service.list();",
      "",
      "    // if (result.succeeded) {",
      "    //   const { data } = result;",
      "    //   this.context.commit('setCollection', data.data);",
      "    // }",
      "  }",
      "",
      "  @Action",
      "  reset() {",
      "    this.context.commit('resetState');",
      "  }",
      "}",
      ""
    ]
  },
  "Vuex Store Model": {
    "prefix": ["tsvue-store-model", "vuex-model"],
    "scope": "typescript",
    "description": "Vuex store model",
    "body": [
      "export interface I${1:Name} {",
      "  id: number;",
      "}",
      "",
      "/**",
      " * Create a ${2:name}",
      " */",
      "export function create${1:Name}(${2:name}: Partial<I${1:Name}>) {",
      "  return {",
      "    id: ${2:name}.id,",
      "  } as I${1:Name};",
      "}",
      "",
      "/**",
      " * Update a ${2:name}",
      " * @param ${2:name} the ${2:name} to update",
      " * @param fieldsToUpdate the fields to update on the ${2:name}",
      " * @example const result = update${1:Name}(${2:name}, { id: 1 })",
      " */",
      "export function update${1:Name}(${2:name}: I${1:Name}, fieldsToUpdate?: Partial<I${1:Name}>) {",
      "  return { ...${2:name}, ...fieldsToUpdate };",
      "}"
    ]
  }
}
